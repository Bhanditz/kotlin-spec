Let's examine a normal "lifetime" of a method invocation. Usually, an execution of a particular method always starts at a single entry point, continues without interruption, following the control flow path (or one of serveral possible control flow path, with branches selected depending on some conditions) until it reaches one of its exit points, where the method returns some return value and control to its immediate caller, at which moment the execution of the method is completed. The set of
parameters and local variables specific to this particular invocation of the method (usually referred to as a stack frame) ceases to exist at that moment, unless some of them have been captured in a closure that
outlives the method invocation. The mechanism of exceptions (that can be seen as a simple form of non-local control transfer), introduces some minor modifications into this process.

In some scenarios it is desirable to have a more envolved behavior than the one just described. It may be necessary to suspend an execution of a method at a certain expression(s)
in its body, and transfer the control flow elsewhere (usually with some additional data). The execution of the method is not yet complete at this point, and the set of its
parameters and local variables is preserved, so that the execution of the method can be resumed
at some later moment at exactly the same point where it has been suspended. A possible motivation for this case is that rather than computing and returning the whole return value
at once, parts of that value can become known earlier, and it is desirable to make them
available to the calling code immediately, without waiting for the completion of the method (this is a typical scenario when implementing generators or iterators). Another
motivation is to start execution of a method immediately when it can be scheduled
by the execution environment (OS, VM, etc.), when not all data required by the method is 
availabe yet. The missing data can be represented by an object encapsulating a delayed
computation, that is usually known as a task, future or promise. When the method execution
reaches a point when the missing data is required to continue execution, but it is not yet
available, the method execution is suspended until the data becomes available. It is
usually said that the task/future/promise is awaited at this point. A functional value
representing the continuation of the suspended method can be subscribed to be invoked
when the task/future/promise is completed.