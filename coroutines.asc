Let's examine a normal "lifetime" of a method invocation. Usually, an execution of a particular method always starts at a single entry point, continues without interruption, following the control flow path (or one of serveral possible control flow path, with branches selected depending on some conditions) until it reaches one of its exit points, where the method returns some return value and control to its immediate caller, at which moment the execution of the method is completed. The set of
parameters and local variables specific to this particular invocation of the method (usually referred to as a stack frame) ceases to exist at that moment, unless some of them have been captured in a closure that
outlives the method invocation. The mechanism of exceptions (that can be seen as a simple form of non-local control transfer), introduces some minor modifications into this process.

In some scenarios it is desirable to have a more involved behavior than the one just described. It may be necessary to suspend an execution of a method at a certain expression(s)
in its body, and transfer the control flow elsewhere (usually with some additional data). The execution of the method is not yet complete at this point, and the set of its
parameters and local variables is preserved, so that the execution of the method can be resumed
at some later moment at exactly the same point where it has been suspended. A possible motivation for this case is that rather than computing and returning the whole return value (e.g. a list)
at once, parts of that value can become known earlier, and it is desirable to make them
available to the calling code immediately, without waiting for the completion of the method (this is a typical scenario when implementing generators or iterators). Another
motivation is to start execution of a method immediately when it can be scheduled
by the execution environment (OS, VM, etc.), when not all data required by the method is 
available yet. The missing data can be represented by an object encapsulating a delayed
computation, that is usually known as a task, future or promise. When the method execution
reaches a point when the missing data is required to continue execution, but it is not yet
available, the method execution is suspended until the data becomes available. It is
usually said that the task/future/promise is awaited at this point. A functional value
representing the continuation of the suspended method can be subscribed to be invoked
when the task/future/promise is completed.

So languages provide a predefined set of language-supported coroutine kinds with mostly fixed behavior, tied to certain
predefined types. A method implementing a coroutine is converted to a state machine, whose states correspond to points
in the method body where the execution of the method can be suspended. The state machine is an object (usually of an anonymous
compiler-generated class) allocated on the heap (so, its lifetime is not restricted by a lifetime of a certain stack frame).
Parameters and local variables of the method become fields of the object reperesing the state machine, and the method body
is encapsulated (with some pertinent transformation) into one (or sometimes more) methods of the object. The object usually has an
additional field storing a sequential number of the current state. An invocation of the coroutine usually returns an instance of a predefined
class or an interface, representing the coroutine and providing some methods to observe or control its current state, subscribe to its 
completion or combine it with other objects of the same or similar type. The actual invocation of the coroutine may have already stated
prior to returning the result (as often happens with futures), or may have to be manually started by invocation of a certain method
(as often happens with lazy generators). So a language prescribes both how a continuation is transformed into a state machine,
and how a public API of the state machine looks and behaves. In our view, this approach limits the scope of those features, and
restricts their applicability and usefulness. If an asynchronous lazy generator is required in a certain scenraio, it has to wait
until this particular kind of coroutines is implemented in the language (or, more probably, has to be manually written using lower-level
language constructs, that is both error-prone and obscuring the idea the programmer has in mind). Apparently, it also increases burden
on compiler developers, who need to design, implement and test support for every new kind of coroutines in the language.

We propose an alternative approach, where the compiler is only controls the transformation of the coroutine body ito a state machine, why
its public API and precise behavior can be defined in a library. So, new kind of coroutines can easily be introduced by using or creating new libraries, without any changes to the language.

Here is a summary of our proposal. Some details, in particular, syntax rules, are chosen quite arbitrarily and are not intended to represent
a final design. For simplicity, we assume that transformation of coroutines to stack machine happens only for function literals, not named functions
(this restriction can be lifted leter if deemed necessary). To distinguish function literals representing coroutines, we prefix them with an ampersand:
`&{...} `. Every coroutine has an associated controller object. We write an expression (usually, a variable) that evaluates to the controller object,
immediately before the coroutine: `ctrl &{...}`. The controller is responsible for governing the coroutine life cycle, and provide an API allowing other parts of the program to interact with the coroutine. The type C of the controller object is not prescribed exactly. We assume that the type C has a
non-empty set of methods marked with the modifier `cofun` (typical names of those methods are `yield` and `await`). These methods are available within the coroutine body by their simple names, but with signatures different than the ones specified in their declarations. The locations in the coroutine body where any of these methods is invoked are called suspension points.

The coroutine itself is converted
by the compiler into a state machine, implemented by an anonymous compiler-generated class S. The body of the coroutine, with some tranformations
explained below, is converted to a method of S named `invoke` (for simplicity, we omit details of transformations of try-catch-finally statements). The parameters and local variables of the coroutine are converted to fields of the class S (unless they are captured in a nested anonymous function and so
are already have to be converted to fields of a class representing a closure). The class S has an integer field named `state` storing the index of the
current state of the state machine. Every evaluation of the expression `ctrl &{...}` creates a new instance of S, passes it as a single argument
to the method of C called `create`, and the result of the evaluation of the expression `ctrl &{...}` is whatever value of whatever type returned by
the method `create` (typically, it is a future or a lazy sequence). The controller, depending on its purposes, are free to perform the first invocation
of the method `invoke` of S synchronously before returning from `create`, or at some later moment, possibly triggered by an invocation of a method in its
public API (this corresponds to an immediate or delayed start of the coroutine). The method `invoke` typically has a parameter (TODO: figure out the rules
about its typing), but an argument for this parameter is ignored for the first invocation of the `invoke` method. The body of the invoke method
(recall that is has been constructed from the coroutine body) is enclosed in a `when` statement controlled by the `state` variable, each branch of the `when` statement represents a part of the coroutine between two consecutive suspension points. The evaluation rules for each branch are the regular rules
that apply for non-coroutine blocks. A local variable that is used strictly within a single branch may be implemented as a regular local by the compiler,
without promoting it to a field of the state machine. The branch corresponding to the initial state is the part of the coroutine between its entry point
and its first suspension point. It executes on the first call to `invoke`, and ends when the control reaches the expression representing the first
suspension point. Assume that this point has the form `val x = foo(bar(), yield(baz()), qux())` where `yield` is a `cofun` methos. The subexpressions `bar()` and `baz()` belong to the first branch, the result of `bar()` is stowed, and the result of `baz()` is used in the invocation of the `yield` method. The subexpression `val x = foo(<result of bar>, <result of yield>, qux())` belongs to the second branch (so, the second branch first unstows the result of `bar()`, then retrieves a value passed from outside to serve as the result of `yield`, then invokes `qux`, then invokes `foo` with 3 arguments
on the evaluation stack and, finally, assign the result of `foo` to the local variable `x` and proceeds with the further evaluation of the second branch).
the similar process happens at the beginning of the third and other branches.

Let's inspect in more details the invocation of `yield`. This is a pseudo-function, in the sense that it syntactically looks like a regular function
invocation, but is performed in a different way. Its argument(s) are passed to the corresponding parameters of the function named `yield` with the
modifier `cofun` in the controller, but the return type of that declaration is `Unit` and it typically returns immediately back to the `invoke` method after storing its arguments within the controller. Then the `invoke` function returns immediately `true` to its caller (that can be `create` or another method of the controller).

